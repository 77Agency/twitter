{"name":"Twitter","tagline":"A Ruby interface to the Twitter API.","body":"# The Twitter Ruby Gem\r\n\r\n[![Gem Version](https://badge.fury.io/rb/twitter.png)][gem]\r\n[![Build Status](https://secure.travis-ci.org/sferik/twitter.png?branch=master)][travis]\r\n[![Dependency Status](https://gemnasium.com/sferik/twitter.png?travis)][gemnasium]\r\n[![Code Climate](https://codeclimate.com/github/sferik/twitter.png)][codeclimate]\r\n[![Coverage Status](https://coveralls.io/repos/sferik/twitter/badge.png?branch=master)][coveralls]\r\n[![Click here to make a donation](http://www.pledgie.com/campaigns/18388.png)][pledgie]\r\n\r\n[gem]: https://rubygems.org/gems/twitter\r\n[travis]: http://travis-ci.org/sferik/twitter\r\n[gemnasium]: https://gemnasium.com/sferik/twitter\r\n[codeclimate]: https://codeclimate.com/github/sferik/twitter\r\n[coveralls]: https://coveralls.io/r/sferik/twitter\r\n[pledgie]: http://pledgie.com/campaigns/18388\r\n\r\nA Ruby interface to the Twitter API.\r\n\r\n## Installation\r\n    gem install twitter\r\n\r\nTo ensure the code you're installing hasn't been tampered with, it's\r\nrecommended that you verify the signature. To do this, you need to add my\r\npublic key as a trusted certificate (you only need to do this once):\r\n\r\n    gem cert --add <(curl -Ls https://gist.github.com/sferik/4701180/raw/public_cert.pem)\r\n\r\nThen, install the gem with the high security trust policy:\r\n\r\n    gem install twitter -P HighSecurity\r\n\r\n## Quick Start Guide\r\nSo you want to get up and tweeting as fast as possible?\r\n\r\nFirst, [register your application with Twitter][register].\r\n\r\nThen, copy and paste in your OAuth data.\r\n\r\n```ruby\r\nTwitter.configure do |config|\r\n  config.consumer_key = YOUR_CONSUMER_KEY\r\n  config.consumer_secret = YOUR_CONSUMER_SECRET\r\n  config.oauth_token = YOUR_OAUTH_TOKEN\r\n  config.oauth_token_secret = YOUR_OAUTH_TOKEN_SECRET\r\nend\r\n```\r\n\r\nThat's it! You're ready to Tweet:\r\n```ruby\r\nTwitter.update(\"I'm tweeting with @gem!\")\r\n```\r\n\r\nFor more examples of how to use the gem, read the [documentation][] or see [Usage Examples][] below.\r\n\r\n[register]: https://dev.twitter.com/apps/new\r\n[Usage Examples]: #usage-examples\r\n\r\n## CLI\r\n\r\nLooking for the Twitter command-line interface? It was [removed][] from this\r\ngem in version 0.5.0 and now exists as a [separate project][t].\r\n\r\n[removed]: https://github.com/sferik/twitter/commit/dd2445e3e2c97f38b28a3f32ea902536b3897adf\r\n[t]: https://github.com/sferik/t\r\n\r\n## Documentation\r\n[http://rdoc.info/gems/twitter][documentation]\r\n\r\n[documentation]: http://rdoc.info/gems/twitter\r\n\r\n## Announcements\r\nYou should [follow @gem][follow] on Twitter for announcements and updates about\r\nthis library.\r\n\r\n[follow]: https://twitter.com/gem\r\n\r\n## Mailing List\r\nPlease direct questions about this library to the [mailing list].\r\n\r\n[mailing list]: https://groups.google.com/group/twitter-ruby-gem\r\n\r\n## Apps Wiki\r\nDoes your project or organization use this gem? Add it to the [apps\r\nwiki][apps]!\r\n\r\n[apps]: https://github.com/sferik/twitter/wiki/apps\r\n\r\n## Configuration\r\nTwitter API v1.1 requires you to authenticate via OAuth, so you'll need to\r\n[register your application with Twitter][register]. Once you've registered an\r\napplication, make sure to set the correct access level, otherwise you may see\r\nthe error:\r\n\r\n    Read-only application cannot POST\r\n\r\nYour new application will be assigned a consumer key/secret pair and you will\r\nbe assigned an OAuth access token/secret pair for that application. You'll need\r\nto configure these values before you make a request or else you'll get the\r\nerror:\r\n\r\n    Bad Authentication data\r\n\r\nApplications that make requests on behalf of a single Twitter user can pass\r\nglobal configuration options as a block to the `Twitter.configure` method.\r\n\r\n```ruby\r\nTwitter.configure do |config|\r\n  config.consumer_key = YOUR_CONSUMER_KEY\r\n  config.consumer_secret = YOUR_CONSUMER_SECRET\r\n  config.oauth_token = YOUR_OAUTH_TOKEN\r\n  config.oauth_token_secret = YOUR_OAUTH_TOKEN_SECRET\r\nend\r\n```\r\n\r\nAlternately, you can set the following environment variables:\r\n\r\n    TWITTER_CONSUMER_KEY\r\n    TWITTER_CONSUMER_SECRET\r\n    TWITTER_OAUTH_TOKEN\r\n    TWITTER_OAUTH_TOKEN_SECRET\r\n\r\nAfter configuration, requests can be made like so:\r\n\r\n```ruby\r\nTwitter.update(\"I'm tweeting with @gem!\")\r\n```\r\n\r\n#### Thread Safety\r\nApplications that make requests on behalf of multiple Twitter users should\r\navoid using global configuration. In this case, you may still specify the\r\n`consumer_key` and `consumer_secret` globally. (In a Rails application, this\r\ncould go in `config/initializers/twitter.rb`.)\r\n\r\n```ruby\r\nTwitter.configure do |config|\r\n  config.consumer_key = YOUR_CONSUMER_KEY\r\n  config.consumer_secret = YOUR_CONSUMER_SECRET\r\nend\r\n```\r\n\r\nThen, for each user's access token/secret pair, instantiate a\r\n`Twitter::Client`:\r\n\r\n```ruby\r\nerik = Twitter::Client.new(\r\n  :oauth_token => \"Erik's access token\",\r\n  :oauth_token_secret => \"Erik's access secret\"\r\n)\r\n\r\njohn = Twitter::Client.new(\r\n  :oauth_token => \"John's access token\",\r\n  :oauth_token_secret => \"John's access secret\"\r\n)\r\n```\r\n\r\nYou can now make threadsafe requests as the authenticated user:\r\n\r\n```ruby\r\nThread.new{erik.update(\"Tweeting as Erik!\")}\r\nThread.new{john.update(\"Tweeting as John!\")}\r\n```\r\n\r\nOr, if you prefer, you can specify all configuration options when instantiating\r\na `Twitter::Client`:\r\n\r\n```ruby\r\nclient = Twitter::Client.new(\r\n  :consumer_key => \"an application's consumer key\",\r\n  :consumer_secret => \"an application's consumer secret\",\r\n  :oauth_token => \"a user's access token\",\r\n  :oauth_token_secret => \"a user's access secret\"\r\n)\r\n```\r\n\r\nThis may be useful if you're using multiple consumer key/secret pairs.\r\n\r\n#### Middleware\r\nThe Faraday middleware stack is fully configurable and is exposed as a\r\n`Faraday::Builder` object. You can modify the default middleware in-place:\r\n\r\n```ruby\r\nTwitter.middleware.insert_after Twitter::Response::RaiseError, CustomMiddleware\r\n```\r\n\r\nA custom adapter may be set as part of a custom middleware stack:\r\n\r\n```ruby\r\nTwitter.middleware = Faraday::Builder.new(\r\n  &Proc.new do |builder|\r\n    # Specify a middleware stack here\r\n    builder.adapter :some_other_adapter\r\n  end\r\n)\r\n```\r\n\r\n## Usage Examples\r\nAll examples require an authenticated Twitter client. See the section on <a\r\nhref=\"#configuration\">configuration</a> above.\r\n\r\n**Tweet (as the authenticated user)**\r\n\r\n```ruby\r\nTwitter.update(\"I'm tweeting with @gem!\")\r\n```\r\n**Follow a user (by screen name or user ID)**\r\n\r\n```ruby\r\nTwitter.follow(\"gem\")\r\nTwitter.follow(213747670)\r\n```\r\n**Fetch a user (by screen name or user ID)**\r\n\r\n```ruby\r\nTwitter.user(\"gem\")\r\nTwitter.user(213747670)\r\n```\r\n**Fetch a cursored list of followers with profile details (by screen name or user ID, or by implict authenticated user)**\r\n\r\n```ruby\r\nTwitter.followers(\"gem\")\r\nTwitter.followers(213747670)\r\nTwitter.followers\r\n```\r\n**Fetch a cursored list of friends with profile details (by screen name or user ID, or by implict authenticated user)**\r\n\r\n```ruby\r\nTwitter.friends(\"gem\")\r\nTwitter.friends(213747670)\r\nTwitter.friends\r\n```\r\n\r\n**Fetch a collection of user_ids that the currently authenticated user does not want to receive retweets from**\r\n\r\n```ruby\r\nTwitter.no_retweet_ids\r\n````\r\n\r\n**Fetch the timeline of Tweets by a user**\r\n\r\n```ruby\r\nTwitter.user_timeline(\"gem\")\r\nTwitter.user_timeline(213747670)\r\n```\r\n**Fetch the timeline of Tweets from the authenticated user's home page**\r\n\r\n```ruby\r\nTwitter.home_timeline\r\n```\r\n**Fetch the timeline of Tweets mentioning the authenticated user**\r\n\r\n```ruby\r\nTwitter.mentions_timeline\r\n```\r\n**Fetch a particular Tweet by ID**\r\n\r\n```ruby\r\nTwitter.status(27558893223)\r\n```\r\n**Find the 3 most recent marriage proposals to @justinbieber**\r\n\r\n```ruby\r\nTwitter.search(\"to:justinbieber marry me\", :count => 3, :result_type => \"recent\").results.map do |status|\r\n  \"#{status.from_user}: #{status.text}\"\r\nend\r\n```\r\n**Find a Japanese-language Tweet tagged #ruby (excluding retweets)**\r\n\r\n```ruby\r\nTwitter.search(\"#ruby -rt\", :lang => \"ja\", :count => 1).results.first.text\r\n```\r\nFor more usage examples, please see the full [documentation][].\r\n\r\n## Streaming\r\nTo access the Twitter Streaming API, we recommend [TweetStream][].\r\n\r\n[tweetstream]: https://github.com/intridea/tweetstream\r\n\r\n## Performance\r\nYou can improve performance by loading a faster JSON parsing library. By\r\ndefault, JSON will be parsed with [okjson][]. For faster JSON parsing, we\r\nrecommend [Oj][].\r\n\r\n[okjson]: https://github.com/ddollar/okjson\r\n[oj]: https://rubygems.org/gems/oj\r\n\r\n## Statistics\r\nHere are some fun facts about this library:\r\n\r\n* It is implemented in just 2,000 lines of Ruby code\r\n* With over 5,000 lines of specs, the spec-to-code ratio is about 2.5:1\r\n* The spec suite contains over 750 examples and runs in about 5 seconds\r\n* It has 100% C0 code coverage (the tests execute every line of\r\n  source code at least once)\r\n* It is comprehensive: you can request all documented Twitter REST API\r\n  resources (over 100 resources)\r\n* This gem works on every major Ruby implementation, including JRuby and\r\n  Rubinius\r\n* The first version was released on November 26, 2006\r\n* This gem has just three runtime dependencies: `faraday`, `multi_json`, and\r\n  `simple_oauth`\r\n* Previous versions of this gem have been [downloaded over half a million\r\n  times][stats]\r\n\r\n[stats]: https://rubygems.org/gems/twitter\r\n\r\n## Supported Ruby Versions\r\nThis library aims to support and is [tested against][travis] the following Ruby\r\nimplementations:\r\n\r\n* Ruby 1.8.7\r\n* Ruby 1.9.2\r\n* Ruby 1.9.3\r\n* Ruby 2.0.0\r\n\r\nIf something doesn't work on one of these interpreters, it's a bug.\r\n\r\nThis library may inadvertently work (or seem to work) on other Ruby\r\nimplementations, however support will only be provided for the versions listed\r\nabove.\r\n\r\nIf you would like this library to support another Ruby version, you may\r\nvolunteer to be a maintainer. Being a maintainer entails making sure all tests\r\nrun and pass on that implementation. When something breaks on your\r\nimplementation, you will be responsible for providing patches in a timely\r\nfashion. If critical issues for a particular implementation exist at the time\r\nof a major release, support for that Ruby version may be dropped.\r\n\r\n## Versioning\r\nThis library aims to adhere to [Semantic Versioning 2.0.0][semver]. Violations\r\nof this scheme should be reported as bugs. Specifically, if a minor or patch\r\nversion is released that breaks backward compatibility, that version should be\r\nimmediately yanked and/or a new version should be immediately released that\r\nrestores compatibility. Breaking changes to the public API will only be\r\nintroduced with new major versions. As a result of this policy, you can (and\r\nshould) specify a dependency on this gem using the [Pessimistic Version\r\nConstraint][pvc] with two digits of precision. For example:\r\n\r\n    spec.add_dependency 'twitter', '~> 4.0'\r\n\r\n[semver]: http://semver.org/\r\n[pvc]: http://docs.rubygems.org/read/chapter/16#page74\r\n\r\n## What's new in version 4?\r\n#### Twitter API v1.1\r\nVersion 4 of this library targets Twitter API v1.1. To understand the\r\nimplications of this change, please read the following announcements from\r\nTwitter:\r\n\r\n* [Changes coming in Version 1.1 of the Twitter API][coming]\r\n* [Current status: API v1.1][status]\r\n* [Overview: Version 1.1 of the Twitter API][overview]\r\n\r\n[coming]: https://dev.twitter.com/blog/changes-coming-to-twitter-api\r\n[status]: https://dev.twitter.com/blog/current-status-api-v1.1\r\n[overview]: https://dev.twitter.com/docs/api/1.1/overview\r\n\r\nDespite the removal of certain underlying functionality in Twitter API v1.1,\r\nthis library aims to preserve backward-compatibility wherever possible. For\r\nexample, despite the removal of the [`GET\r\nstatuses/retweeted_by_user`][retweeted_by_user] resource, the\r\n`Twitter::API#retweeted_by_user` method continues to exist, implemented by\r\nmaking multiple requests to the [`GET statuses/user_timeline`][user_timeline]\r\nresource. As a result, there is no longer a one-to-one correlation between\r\nmethod calls and Twitter API requests. In fact, it's possible for a single\r\nmethod call to exceed the Twitter API rate limit for a resource. If you think\r\nthis might cause a problem for your application, feel free to [join the\r\ndiscussion][discussion].\r\n\r\n[retweeted_by_user]: https://dev.twitter.com/docs/api/1/get/statuses/retweeted_by_user\r\n[user_timeline]: https://dev.twitter.com/docs/api/1.1/get/statuses/user_timeline\r\n[discussion]: https://dev.twitter.com/discussions/10644\r\n\r\n#### Rate Limiting\r\nAnother consequence of Twitter API v1.1 is that the\r\n`Twitter::Client#rate_limit` method has been removed, since the concept of a\r\nclient-wide rate limit no longer exists. Rate limits are now applied on a\r\nper-resource level, however, since there is no longer a one-to-one mapping\r\nbetween methods and Twitter API resources, it's not entirely obvious how rate\r\nlimit information should be exposed. I've decided to go back to the pre-3.0.0\r\nbehavior of including rate limit information on `Twitter::Error` objects.\r\nHere's an example of how to handle rate limits:\r\n\r\n```ruby\r\nMAX_ATTEMPTS = 3\r\nnum_attempts = 0\r\nbegin\r\n  num_attempts += 1\r\n  retweets = Twitter.retweeted_by_user(\"sferik\")\r\nrescue Twitter::Error::TooManyRequests => error\r\n  if num_attempts <= MAX_ATTEMPTS\r\n    # NOTE: Your process could go to sleep for up to 15 minutes but if you\r\n    # retry any sooner, it will almost certainly fail with the same exception.\r\n    sleep error.rate_limit.reset_in\r\n    retry\r\n  else\r\n    raise\r\n  end\r\nend\r\n```\r\n#### Methods Missing\r\nAs a consequence of moving to Twitter API v1.1, the following methods from\r\nversion 3 are no longer available in version 4:\r\n\r\n* `Twitter::API#accept`\r\n* `Twitter::API#deny`\r\n* `Twitter::API#disable_notifications`\r\n* `Twitter::API#enable_notifications`\r\n* `Twitter::API#end_session`\r\n* `Twitter::API#rate_limit_status`\r\n* `Twitter::API#rate_limited?`\r\n* `Twitter::API#recommendations`\r\n* `Twitter::API#related_results`\r\n* `Twitter::API#retweeted_to_user`\r\n* `Twitter::API#trends_daily`\r\n* `Twitter::API#trends_weekly`\r\n* `Twitter::Client#rate_limit`\r\n* `Twitter::RateLimit#class`\r\n\r\n#### Custom Endpoints\r\nThe `Twitter::API#update_with_media` method no longer uses the custom\r\n`upload.twitter.com` endpoint, so `media_endpoint` configuration has been\r\nremoved. Likewise, the `Twitter::API#search` method no longer uses the custom\r\n`search.twitter.com` endpoint, so `search_endpoint` configuration has also been\r\nremoved.\r\n\r\n#### Errors\r\nIt's worth mentioning new error classes:\r\n\r\n* `Twitter::Error::GatewayTimeout`\r\n* `Twitter::Error::TooManyRequests`\r\n* `Twitter::Error::UnprocessableEntity`\r\n\r\nIn previous versions of this library, rate limit errors were indicated by\r\nraising either `Twitter::Error::BadRequest` or\r\n`Twitter::Error::EnhanceYourCalm` (for the Search API). As of version 4, the\r\nlibrary will raise `Twitter::Error::TooManyRequests` for all rate limit errors.\r\nThe `Twitter::Error::EnhanceYourCalm` class has been aliased to\r\n`Twitter::Error::TooManyRequests`.\r\n\r\n#### Identity Map\r\nIn version 4, the identity map is [disabled by default][disabled]. If you want\r\nto enable this feature, you can use the [default identity map][default] or\r\n[write a custom identity map][custom].\r\n\r\n```ruby\r\nTwitter.identity_map = Twitter::IdentityMap\r\n```\r\n\r\n[disabled]: https://github.com/sferik/twitter/commit/c6c5960bea998abdc3e82cbb8dd68766a2df52e1\r\n[default]: lib/twitter/identity_map.rb\r\n[custom]: etc/sqlite_identity_map.rb\r\n\r\n## Additional Notes\r\nThis will be the last major version of this library to support Ruby 1.8.\r\nRequiring Ruby 1.9 will allow us to [remove][class_variable_get]\r\n[various][each_with_object] [hacks][singleton_class] put in place to maintain\r\nRuby 1.8 compatibility. [The first stable version of Ruby 1.9 was released on\r\nAugust 19, 2010.][ruby192] If you haven't found the opportunity to upgrade your\r\nRuby interpreter since then, let this be your nudge. Once version 5 of this\r\nlibrary is released, all previous versions will cease to be supported, even if\r\ncritical security vulnerabilities are discovered.\r\n\r\n[class_variable_get]: https://github.com/sferik/twitter/commit/88c5a0513d1b58a1d4ae1a1e3deeb012c9d19547\r\n[each_with_object]: https://github.com/sferik/twitter/commit/6052252a07baf7aefe0f100bba0abd2cbb7139bb\r\n[singleton_class]: https://github.com/sferik/twitter/commit/2ed9db21c87d1218b15373e42a36ad536b07dcbb\r\n[ruby192]: http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-talk/367983\r\n\r\n## Copyright\r\nCopyright (c) 2006-2013 John Nunemaker, Wynn Netherland, Erik Michaels-Ober, Steve Richert.\r\nSee [LICENSE][] for details.\r\n\r\n[license]: LICENSE.md\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}